1.1.3 Consultas sobre una tabla

1. SELECT nombre FROM producto;
2. SELECT nombre, precio FROM producto;
3. SELECT * FROM producto;
4. SELECT nombre, precio AS precio_euros, ROUND(precio * 1.11, 2) AS precio_dolares FROM producto;
5. SELECT nombre AS nombre_de_producto, precio AS euros, ROUND(precio * 1.11, 2) AS dolares FROM producto;
6. SELECT UPPER(nombre) AS nombre, precio FROM producto;
7. SELECT LOWER(nombre) AS nombre, precio FROM producto;
8. SELECT nombre, UPPER(SUBSTRING(nombre, 1, 2)) FROM fabricante;
9. SELECT nombre, ROUND(precio) FROM producto;
10. SELECT nombre, TRUNCATE(precio, 0) FROM producto;
11. SELECT codigo_fabricante FROM producto;
12. SELECT DISTINCT codigo_fabricante FROM producto;
13. SELECT nombre FROM fabricante ORDER BY nombre ASC;
14. SELECT nombre FROM fabricante ORDER BY nombre DESC;
15. SELECT nombre FROM producto ORDER BY nombre ASC, precio DESC;
16. SELECT * FROM fabricante LIMIT 5;
17. SELECT * FROM fabricante LIMIT 2 OFFSET 3;
18. SELECT nombre, precio FROM producto ORDER BY precio ASC LIMIT 1;
19. SELECT nombre, precio FROM producto ORDER BY precio DESC LIMIT 1;
20. SELECT nombre FROM producto WHERE codigo_fabricante = 2;
21. SELECT nombre FROM producto WHERE precio <= 120;
22. SELECT nombre FROM producto WHERE precio >= 400;
23. SELECT nombre FROM producto WHERE NOT precio >= 400;
24. SELECT * FROM producto WHERE precio >= 80 AND precio <=300;
25. SELECT * FROM producto WHERE precio BETWEEN 60 AND 200;
26. SELECT * FROM producto WHERE precio > 200 AND codigo_fabricante = 6;
27. SELECT * FROM producto WHERE codigo_fabricante = 1 OR codigo_fabricante = 3 OR codigo_fabricante = 5;
28. SELECT * FROM producto WHERE codigo_fabricante IN (1,3,5);
29. SELECT nombre, precio * 100 AS centimos FROM producto;
30. SELECT nombre FROM fabricante WHERE SUBSTRING(nombre, 1, 1) = "S";
31. SELECT nombre FROM fabricante WHERE SUBSTRING(nombre, -1, 1) = "e";
32. SELECT nombre FROM fabricante WHERE nombre LIKE "%w%";
33. SELECT nombre FROM fabricante WHERE nombre LIKE "____";
34. SELECT nombre FROM producto WHERE nombre LIKE "%Portatil%";
35. SELECT nombre FROM producto WHERE nombre LIKE "%Monitor%" AND precio < 215;
36. SELECT nombre, precio FROM producto WHERE precio >= 180 ORDER BY precio DESC, nombre ASC;

1.1.4 Consultas multitabla (Composición interna)

1. SELECT producto.nombre AS nombre_producto, precio, fabricante.nombre AS nombre_fabricante
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo;

2. SELECT producto.nombre AS nombre_producto, precio, fabricante.nombre AS nombre_fabricante
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
ORDER BY nombre_fabricante;

3. SELECT producto.codigo AS codigo_producto, producto.nombre AS nombre_producto,
	fabricante.codigo AS codigo_fabricante, fabricante.nombre AS nombre_fabricante
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo;

4. SELECT producto.nombre AS nombre_producto, precio, fabricante.nombre AS nombre_fabricante
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
ORDER BY precio ASC LIMIT 1;

5. SELECT producto.nombre AS nombre_producto, precio, fabricante.nombre AS nombre_fabricante
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
ORDER BY precio DESC LIMIT 1;

6. SELECT * FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE fabricante.nombre = "Lenovo";

7. SELECT * FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE fabricante.nombre = "Crucial" AND precio > 200;

8. SELECT * FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE fabricante.nombre = "ASUS" OR fabricante.nombre="Hewlett-Packard" OR fabricante.nombre="Seagate";

9. SELECT * FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE fabricante.nombre IN("ASUS","Hewlett-Packard","Seagate");

10. SELECT producto.nombre AS nombre_producto, precio
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE SUBSTRING(fabricante.nombre, -1, 1) = "e";

11. SELECT producto.nombre AS nombre_producto, precio
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE fabricante.nombre LIKE "%w%";

12. SELECT producto.nombre AS nombre_producto, precio, fabricante.nombre AS nombre_fabricante
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE precio >= 180
ORDER BY precio ASC, nombre_producto DESC;

13. SELECT DISTINCT fabricante.codigo, fabricante.nombre
FROM fabricante INNER JOIN producto ON fabricante.codigo = producto.codigo_fabricante;

1.1.5 Consultas multitabla (Composición externa)

1. SELECT DISTINCT fabricante.nombre FROM fabricante LEFT JOIN producto
ON fabricante.codigo = producto.codigo_fabricante;

2. SELECT DISTINCT fabricante.nombre FROM fabricante LEFT JOIN producto
ON fabricante.codigo = producto.codigo_fabricante WHERE producto.codigo_fabricante IS NULL;

3. No ya que como clave foránea tiene creada una restricción "NOT NULL" para mantener la integridad
referecial, ya que siempre debe hacer referencia a la primary key de la tabla fabricante. Se podría remodelar la
base de datos permitiendo una participacion "0,1" de la tabla producto en la tabla fabricante, en este caso se 
crearía una nueva tabla para la relación, con las claves primarias de las 2 entidades como claves ajenas, y
estableciendo como clave primaria para la tabla relación, la clave que hace referencia al lado "n", en este caso
al lado "producto".

1.1.6 Consultas resumen

1. SELECT COUNT(*) AS total_productos FROM producto;
2. SELECT COUNT(*) AS total_fabricante FROM fabricante;
3. SELECT COUNT(DISTINCT codigo_fabricante) AS num_codigos FROM producto;
4. SELECT AVG(precio) AS media_precios FROM producto;
5. SELECT MIN(precio) AS precio_minimo FROM producto;
6. SELECT MAX(precio) AS precio_minimo FROM producto;
7. SELECT nombre, precio FROM producto ORDER BY precio ASC LIMIT 1;
8. SELECT nombre, precio FROM producto ORDER BY precio DESC LIMIT 1;
9. SELECT SUM(precio) AS suma_precios FROM producto;

10. SELECT COUNT(*) AS productos_asus 
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE fabricante.nombre ="Asus";

11. SELECT AVG(precio) AS media_precios_asus
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE fabricante.nombre = "Asus";

12. SELECT MIN(precio) AS precio_mas_barato_asus
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE fabricante.nombre = "Asus";

13. SELECT MAX(precio) AS precio_mas_caro_asus
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE fabricante.nombre = "Asus";

14. SELECT SUM(precio) AS suma_precios_asus
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE fabricante.nombre = "Asus";

15. SELECT MAX(precio) AS precio_maximo_crucial,
	MIN(precio) AS precio_minimo_crucial,
	AVG(precio) AS precio_medio_crucial,
	COUNT(*) AS num_productos_crucial
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE fabricante.nombre = "Crucial";

16. SELECT fabricante.nombre AS nombre_fabricante, COUNT(producto.codigo_fabricante) AS cantidad_productos 
FROM fabricante LEFT JOIN producto ON fabricante.codigo = producto.codigo_fabricante
GROUP BY nombre_fabricante
ORDER BY cantidad_productos DESC;

17. SELECT fabricante.nombre AS nombre_fabricante,
	MAX(precio) AS precio_maximo,
	MIN(precio) AS precio_minimo,
	AVG(precio) AS precio_medio
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
GROUP BY fabricante.nombre;

18. SELECT codigo_fabricante,
	MAX(precio) AS precio_maximo,
	MIN(precio) AS precio_minimo,
	AVG(precio) AS precio_medio,
	COUNT(*) AS numero_productos
FROM producto
GROUP BY codigo_fabricante;

19. SELECT fabricante.nombre AS nombre_fabricante,
	MAX(precio) AS precio_maximo,
	MIN(precio) AS precio_minimo,
	AVG(precio) AS precio_medio,
	COUNT(*) AS numero_productos
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
GROUP BY nombre_fabricante
HAVING precio_medio > 200;

20. SELECT COUNT(*) AS productos_180_o_mas
FROM producto
WHERE precio >= 180;

21. SELECT fabricante.nombre AS nombre_fabricante,
	COUNT(*) AS productos_180_o_mas
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE precio >= 180
GROUP BY fabricante.nombre;

22. SELECT producto.codigo_fabricante,
	AVG(precio) AS precio_medio
FROM producto
GROUP BY producto.codigo_fabricante;

23. SELECT fabricante.nombre AS nombre_fabricante,
	AVG(precio) AS media_precios
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
GROUP BY fabricante.nombre;

24. SELECT fabricante.nombre
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
GROUP BY fabricante.nombre
HAVING AVG(precio) >= 150;

25. SELECT fabricante.nombre
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
GROUP BY fabricante.nombre
HAVING COUNT(*) >= 2;

26. SELECT fabricante.nombre,
	COUNT(*) AS producto_precio_220_o_mas
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
WHERE precio >= 220
GROUP BY fabricante.nombre;

27. SELECT fabricante.nombre,
	COUNT(precio) AS producto_precio_220_o_mas
FROM producto RIGHT JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo AND producto.precio >= 220
GROUP BY fabricante.nombre;

28. SELECT fabricante.nombre 
FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
GROUP BY fabricante.nombre
HAVING SUM(precio) > 1000;

29. 

1.1.7 Subconsultas (En la cláusula WHERE)
1.1.7.1 Con operadores básicos de comparación

1. SELECT * FROM producto WHERE codigo_fabricante = (SELECT codigo FROM fabricante WHERE nombre = "Lenovo");

2. SELECT * FROM producto
WHERE precio =
	(SELECT MAX(precio) FROM producto
	WHERE codigo_fabricante =
		(SELECT codigo FROM fabricante
		WHERE nombre = "Lenovo"));

3. SELECT nombre FROM producto
WHERE codigo_fabricante = (SELECT codigo FROM fabricante WHERE nombre = "Lenovo")
ORDER BY precio DESC LIMIT 1;

4. SELECT nombre FROM producto
WHERE codigo_fabricante = ( SELECT codigo FROM fabricante WHERE nombre = "Hewlett-Packard")
ORDER BY precio ASC LIMIT 1;

5. SELECT * FROM producto
WHERE precio >=
	(SELECT MAX(precio) FROM producto WHERE codigo_fabricante =
		(SELECT codigo FROM fabricante WHERE nombre ="Lenovo"));

6. SELECT * FROM producto
WHERE codigo_fabricante =
	(SELECT codigo FROM fabricante WHERE nombre ="Asus")
	AND precio >
	(SELECT AVG(precio) FROM producto GROUP BY codigo_fabricante HAVING codigo_fabricante =
		(SELECT codigo FROM fabricante WHERE nombre = "Asus"));

1.1.7.2 Subconsultas con ALL y ANY

8. SELECT * FROM producto WHERE precio >= ALL (SELECT precio FROM producto);
9. SELECT * FROM producto WHERE precio <= ALL (SELECT precio FROM producto);

10. SELECT nombre FROM fabricante
WHERE codigo = ANY (SELECT codigo_fabricante FROM producto);

11. SELECT nombre FROM fabricante
WHERE  codigo <> ALL (SELECT codigo_fabricante FROM producto);

1.1.7.3 Subconsultas con IN y NOT IN

12. SELECT nombre FROM fabricante
WHERE codigo IN (SELECT codigo_fabricante FROM producto);

13. SELECT nombre FROM fabricante
WHERE codigo NOT IN (SELECT codigo_fabricante FROM producto);

1.1.7.4 Subconsultas con EXISTS y NOT EXISTS

14. SELECT nombre FROM fabricante
WHERE EXISTS (SELECT * FROM producto WHERE producto.codigo_fabricante = fabricante.codigo);

15. SELECT nombre FROM fabricante
WHERE NOT EXISTS (SELECT * FROM producto WHERE producto.codigo_fabricante = fabricante.codigo);

1.1.7.5 Subconsultas correlacionadas

16. SELECT fabricante.nombre,
	producto.nombre,
	producto.precio
FROM fabricante INNER JOIN producto ON fabricante.codigo = producto.codigo_fabricante
WHERE producto.precio =  (SELECT MAX(precio) FROM producto WHERE producto.codigo_fabricante = fabricante.codigo);

17. SELECT * FROM producto AS tabla_1
WHERE tabla_1.precio >= (SELECT AVG(precio) FROM producto AS tabla_2
	WHERE tabla_1.codigo_fabricante = tabla_2.codigo_fabricante);

1.1.8 Subconsultas (En la cláusula HAVING)

7. SELECT fabricante.nombre FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codigo
GROUP BY fabricante.nombre
HAVING COUNT(*) = (SELECT COUNT(*) FROM producto INNER JOIN fabricante ON producto.codigo_fabricante = fabricante.codig
	WHERE fabricante.nombre = "Lenovo");